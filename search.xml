<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript-Underscore]]></title>
    <url>%2F2017%2F07%2F19%2F2017-07-19-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[underscoreJavaScript是函数式编程语言，支持高阶函数和闭包。函数式编程非常强大，可以写出非常简洁的代码 Array有map()和filter()方法，可是Object没有这些方法。此外，低版本的浏览器例如IE6～8也没有这些方法，怎么办？ 方法一，自己把这些方法添加到Array.prototype中，然后给Object.prototype也加上mapObject()等类似的方法。 方法二，直接找一个成熟可靠的第三方开源库，使用统一的函数来实现map()、filter()这些操作。 采用方法二，选择的第三方库就是underscore，它提供了一套完善的函数式编程的接口，让我们更方便地在JavaScript中实现函数式编程。 jQuery在加载时，会把自身绑定到唯一的全局变量$上，underscore与其类似，会把自身绑定到唯一的全局变量_上，这也是为啥它的名字叫underscore的原因 underscore为集合类对象提供了一致的接口。集合类是指Array和Object，暂不支持Map和Set Collectionsmap/filter和Array的map()与filter()类似，但是underscore的map()和filter()可以作用于Object。当作用于Object时，传入的函数为function (value, key)，第一个参数接收value，第二个参数接收key Object作_.map()操作的返回结果是Array,_.mapObject()返回对象 every / some当集合的所有元素都满足条件时，_.every()函数返回true，当集合的至少一个元素满足条件时，_.some()函数返回true]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-jQuery]]></title>
    <url>%2F2017%2F07%2F18%2F2017-07-18-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[jQuery 选择器 查找和过滤 操作DOM 事件 jQuery这么流行，肯定是因为它解决了一些很重要的问题。实际上，jQuery能帮我们干这些事情： 消除浏览器差异：你不需要自己写冗长的代码来针对不同的浏览器来绑定事件，编写AJAX等代码； 简洁的操作DOM的方法：写$(&#39;#test&#39;)肯定比document.getElementById(&#39;test&#39;)来得简洁； 轻松实现动画、修改CSS等各种操作。 jQuery的理念“Write Less, Do More“，让你写更少的代码，完成更多的工作！ $是著名的jQuery符号。实际上，jQuery把所有功能全部封装在一个全局变量jQuery中，而$也是一个合法的变量名，它是变量jQuery的别名 jQuery语法是为HTML元素的选取编制的，可以对元素执行某些操作。基础语法是：$(selector).action() 美元符号$定义 jQuery 选择符（selector）“查询”和“查找” HTML 元素 jQuery的action()执行对元素的操作 选择器 jQuery元素选择器:使用CSS选择器来选取HTML元素: // 查找&lt;p id=&quot;demo&quot; class=&quot;intro&quot;&gt;...&lt;/p&gt;: $(&quot;p&quot;) 选取&lt;p&gt;元素。 $(&quot;p.intro&quot;) 选取所有class=&quot;intro&quot;的&lt;p&gt;元素。 $(&quot;p#demo&quot;) 选取所有id=&quot;demo&quot;的&lt;p&gt;元素。 jQuery属性选择器:使用XPath表达式来选择带有给定属性的元素: $(&quot;[href]&quot;) 选取所有带有href属性的元素。 $(&quot;[href=&apos;#&apos;]&quot;) 选取所有带有href值等于&quot;#&quot;的元素。 $(&quot;p[href=&apos;#&apos;]&quot;) 选取所有带有href值等于&quot;#&quot;的&lt;p&gt;元素。 $(&quot;[href$=&apos;.jpg&apos;]&quot;) 选取所有href值以 &quot;.jpg&quot; 结尾的元素。 $(&apos;[class^=&quot;icon-&quot;]&apos;)选取所有class值以 &quot;icon-&quot; 结尾的元素 层级选择器:如果两个DOM元素具有层级关系，就可以用$(&#39;ancestor descendant&#39;)来选择，层级之间用空格隔开 $(&apos;ul li&apos;);//选择&lt;ul&gt;下的所有的&lt;li&gt;节点 子选择器$(&#39;parent&gt;child&#39;)类似层级选择器，但是限定了层级关系必须是父子关系，就是&lt;child&gt;节点必须是&lt;parent&gt;节点的直属子节点 $(&apos;ul&gt;li&apos;);//选择&lt;ul&gt;下的所有的&lt;li&gt;子节点 过滤器一般不单独使用，它通常附加在选择器上，帮助我们更精确地定位元素。观察过滤器的效果 $(&apos;ul li:first-child&apos;); // 仅选出第一个元素 $(&apos;ul li:last-child&apos;); // 仅选出最后一个元素 $(&apos;ul li:nth-child(2)&apos;); // 选出第N个元素，N从1开始 $(&apos;ul li:nth-child(even)&apos;); // 选出序号为偶数的元素 $(&apos;ul li:nth-child(odd)&apos;); // 选出序号为奇数的元素 针对表单元素，jQuery还有一组特殊的选择器:input，:file，:radio，:checkbo等 查找和过滤 最常见的查找是在某个节点的所有子节点中查找，使用find()方法，它本身又接收一个任意的选择器 var ul = $(&apos;ul&apos;); // 获得&lt;ul&gt; var dy = ul.find(&apos;.dy&apos;); // 获得&lt;ul&gt;下class=&apos;dy&apos;的元素 如果要从当前节点开始向上查找，使用parent()方法 var parent = dy.parent(); //获得&lt;ul&gt; var a = dy.parent(&apos;div.red&apos;); /// 从dy的父节点开始向上查找，直到找到某个符合条件的节点并返回 对于位于同一层级的节点，可以通过next()和prev()方法 和函数式编程的map、filter类似，jQuery对象也有类似的方法。 filter()方法可以过滤掉不符合选择器条件的节点: var dy = ul.filter(&apos;.dy&apos;); // 获得&lt;ul&gt;下class=&apos;dy&apos;的元素 map()方法把一个jQuery对象包含的若干DOM节点转化为其他对象: var arr = langs.map(function () { return this.innerHTML; }).get(); // 用get()拿到包含string的Array：[&apos;JavaScript&apos;, &apos;Python&apos;, &apos;Swift&apos;, &apos;Scheme&apos;, &apos;Haskell&apos;] 此外，一个jQuery对象如果包含了不止一个DOM节点，first()、last()和slice()方法可以返回一个新的jQuery对象，把不需要的DOM节点去掉： var langs = $(&apos;ul.lang li&apos;); var js = langs.first(); //相当于$(&apos;ul.lang li:first-child&apos;) var haskell = langs.last(); //相当于$(&apos;ul.lang li:last-child&apos;) var sub = langs.slice(2, 4); //参数和数组的slice()方法一致 操作DOM 修改Text和HTMLjQuery对象的text()和html()方法分别获取和修改节点的文本和原始HTML文本 一个jQuery对象可以包含0个或任意个DOM对象，它的方法实际上会作用在对应的每个DOM节点上，这意味着jQuery帮你免去了许多if语句 修改CSS调用jQuery对象的css(&#39;name&#39;, &#39;value&#39;)方法,css()方法将作用于DOM节点的style属性，具有最高优先级。如果要修改class属性，可以用jQuery提供的下列方法： var div = $(&apos;#test-div&apos;); div.css(&apos;color&apos;, &apos;#336699&apos;); // 设置CSS属性 div.hasClass(&apos;highlight&apos;); // false，class是否包含highlight div.addClass(&apos;highlight&apos;); // 添加highlight这个class div.removeClass(&apos;highlight&apos;); // 删除highlight这个class 显示和隐藏DOM要隐藏一个DOM，我们可以设置CSS的display属性为none，利用css()方法就可以实现。不过，要显示这个DOM就需要恢复原有的display属性，这就得先记下来原有的display属性到底是block还是inline还是别的值。 考虑到显示和隐藏DOM元素使用非常普遍，jQuery直接提供show()和hide()方法，我们不用关心它是如何修改display属性的，总之它能正常工作： var a = $(&apos;a[target=_blank]&apos;); a.hide(); // 隐藏 a.show(); // 显示 获取DOM信息width(),height()获取DOM的宽高等信息，attr()和removeAttr()方法用于操作DOM节点的属性 prop()方法和attr()类似，但是HTML5规定有一种属性在DOM节点中可以没有值，只有出现与不出现两种，attr()和prop()对于属性checked处理有所不同，prop()返回值更合理一些。不过，用is()方法判断更好is(&#39;:checked&#39;)，类似的属性还有selected，处理时最好用is(&#39;:selected&#39;) 操作表单对于表单元素，jQuery对象统一提供val()方法获取和设置对应的value属性 修改DOM结构添加DOM要添加新的DOM节点，除了通过jQuery的html()这种暴力方法外，还可以用append()方法，除了接受字符串，append()还可以传入原始的DOM对象，jQuery对象和函数对象 append()把DOM添加到最后，prepend()则把DOM添加到最 如果要把新节点插入到指定位置，可以先定位到插入元素前，同级节点可以用after()或者before()方法 删除DOM要删除DOM节点，拿到jQuery对象后直接调用remove()方法就可以了。如果jQuery对象包含若干DOM节点，实际上可以一次删除多个DOM节 事件 因为JavaScript在浏览器中以单线程模式运行，页面加载后，一旦页面上所有的JavaScript代码被执行完后，就只能依赖触发事件来执行JavaScript代码 浏览器在接收到用户的鼠标或键盘输入后，会自动在对应的DOM节点上触发相应的事件。如果该节点已经绑定了对应的JavaScript处理函数，该函数就会自动调用 on方法用来绑定一个事件，我们需要传入事件名称和对应的处理函数,直接调用click()方法： $(&quot;button&quot;).click(function() {..some code... } ) 鼠标事件 click: 鼠标单击时触发； dblclick：鼠标双击时触发； mouseenter：鼠标进入时触发； mouseleave：鼠标移出时触发； mousemove：鼠标在DOM内部移动时触发；(chrome上有问题) hover：鼠标进入和退出时触发两个函数，相当于mouseenter加上mouseleave。 键盘事件键盘事件仅作用在当前焦点的DOM上，通常是&lt;input&gt;和&lt;textarea&gt;。 keydown：键盘按下时触发； keyup：键盘松开时触发； keypress：按一次键后触发。 其他事件 focus：当DOM获得焦点时触发； blur：当DOM失去焦点时触发； change：当&lt;input&gt;、&lt;select&gt;或&lt;textarea&gt;的内容改变时触发； submit：当&lt;form&gt;提交时触发； ready：当页面被载入并且DOM树完成初始化后触发,仅作用于document对象 我们自己的初始化代码必须放到document对象的ready事件中，保证DOM已完成初始化: $(document).ready(function(){ … }); 如果你遇到$(function () {...})的形式，牢记这是document对象的ready事件处理函数 事件参数有些事件，如mousemove和keypress，我们需要获取鼠标位置和按键的值，否则监听这些事件就没什么意义了。所有事件都会传入Event对象作为参数，可以从Event对象上获取到更多的信息： 取消绑定无参数调用off()一次性移除已绑定的所有类型的事件处理函数，一个已被绑定的事件可以解除绑定，通过off(&#39;click&#39;, function)实现 input.change()相当于input.trigger(&#39;change&#39;)，它是trigger()方法的简写 动画 用JavaScript实现动画，原理非常简单：我们只需要以固定的时间间隔（例如，0.1秒），每次把DOM元素的CSS样式修改一点（例如，高宽各增加10%），看起来就像动画了 show/hide直接以无参数形式调用show()和hide()，会显示和隐藏DOM元素，toggle()方法则根据当前状态决定是show()还是hide()。但是，只要传递一个时间参数进去，就变成了动画 slideUp/slideDownslideUp()把一个可见的DOM元素收起来，效果跟拉上窗帘似的，slideDown()相反，而slideToggle()则根据元素是否可见来决定下一步动作 fadeIn/fadeOutfadeIn()和fadeOut()的动画效果是淡入淡出，也就是通过不断设置DOM元素的opacity属性来实现，而fadeToggle()则根据元素是否可见来决定下一步动作 自定义动画animate()，它可以实现任意动画效果，我们需要传入的参数就是DOM元素最终的CSS状态和时间，jQuery在时间段内不断调整CSS直到达到我们设定的值 AJAX jQuery在全局对象jQuery（也就是$）绑定了ajax()函数，可以处理AJAX请求。ajax(url, settings)函数需要接收一个URL和一个可选的settings对象，常用的选项如下： async：是否异步执行AJAX请求，默认为true，千万不要指定为false； method：发送的Method，缺省为’GET’，可指定为’POST’、’PUT’等； contentType：发送POST请求的格式，默认值为&#39;application/x-www-form-urlencoded; charset=UTF-8&#39;，也可以指定为text/plain、application/json； data：发送的数据，可以是字符串、数组或object。如果是GET请求，data将被转换成query附加到URL上，如果是POST请求，根据contentType把data序列化成合适的格式； headers：发送的额外的HTTP头，必须是一个object； dataType：接收的数据格式，可以指定为’html’、’xml’、’json’、’text’等，缺省情况下根据响应的Content-Type猜测。 下面的例子发送一个GET请求，并返回一个JSON格式的数据： var jqxhr = $.ajax(&apos;/api/categories&apos;, { dataType: &apos;json&apos; }); 对常用的AJAX操作，jQuery提供了一些辅助方法。由于GET请求最常见，所以jQuery提供了get()方法，可以这么写 var jqxhr = $.get(&apos;/path/to/resource&apos;, { name: &apos;Bob Lee&apos;, check: 1 }); //&apos;/path/to/resource?name=Bob%20Lee&amp;check=1&apos; post()和get()类似，但是传入的第二个参数默认被序列化为application/x-www-form-urlencoded var jqxhr = $.post(&apos;/path/to/resource&apos;, { name: &apos;Bob Lee&apos;, check: 1 }); // &apos;name=Bob%20Lee&amp;check=1&apos;作为POST的body被发送 getJSON()方法来快速通过GET获取一个JSON对象 扩展 当我们使用jQuery对象的方法时，由于jQuery对象可以操作一组DOM，而且支持链式操作，所以用起来非常方便。 但是jQuery内置的方法永远不可能满足所有的需求。比如，我们想要高亮显示某些DOM元素，用jQuery可以这么实现： $(&apos;span.hl&apos;).css(&apos;backgroundColor&apos;, &apos;#fffceb&apos;).css(&apos;color&apos;, &apos;#d85030&apos;); $(&apos;p a.hl&apos;).css(&apos;backgroundColor&apos;, &apos;#fffceb&apos;).css(&apos;color&apos;, &apos;#d85030&apos;); 我们可以扩展jQuery来实现自定义方法。将来如果要修改高亮的逻辑，只需修改一处扩展代码。这种方式也称为编写jQuery插件 给jQuery对象绑定一个新方法是通过扩展$.fn对象实现的。让我们来编写第一个扩展——highlight1(): $.fn.highlight1 = function(){ this.css(&apos;backgroundColor&apos;, &apos;#fffceb&apos;).css(&apos;color&apos;, &apos;#d85030&apos;); return this; } 细心的童鞋可能发现了，为什么最后要return this;？因为jQuery对象支持链式操作，我们自己写的扩展方法也要能继续链式下去 $.fn.highlight2 = function(options){ var bgcolor = options &amp;&amp; options.backgroundColor || &apos;#fffceb&apos;; var color = options &amp;&amp; options.color || &apos;d85030&apos;; this.css(&apos;backgroundColor&apos;, bgcolor).css(&apos;color&apos;, color); return this; } 对于默认值的处理，我们用了一个简单的&amp;&amp;和||短路操作符，总能得到一个有效的值。另一种方法是使用jQuery提供的辅助方法$.extend(target, obj1, obj2, ...)，它把多个object对象的属性合并到第一个target对象中，遇到同名属性，总是使用靠后的对象的值，也就是越往后优先级越高： $.fn.highlight = function (options) { var opts = $.extend({}, $.fn.highlight.defaults, options); this.css(&apos;backgroundColor&apos;, opts.backgroundColor).css(&apos;color&apos;, opts.color); return this; } $.fn.highlight.defaults = { color: &apos;#d85030&apos;, backgroundColor: &apos;#fff8de&apos; } 最终，我们得出编写一个jQuery插件的原则： 给$.fn绑定函数，实现插件的代码逻辑； 插件函数最后要return this;以支持链式调用； 插件函数要有默认值，绑定在$.fn.&lt;pluginName&gt;.defaults上； 用户在调用时可传入设定值以便覆盖默认值。]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-浏览器]]></title>
    <url>%2F2017%2F07%2F16%2F2017-07-16-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[浏览器 浏览器对象 操作DOM 操作表单 操作文件 AJAX Promise Canvas 浏览器对象 windowwindow对象不但充当全局作用域，而且表示浏览器窗口.innerWidth和innerHeight属性，可以获取浏览器窗口的内部宽度和高outerWidth和outerHeight属性，可以获取浏览器窗口的整个宽度和高 navigatornavigator对象表示浏览器的信息，最常用的属性包括： navigator.appName：浏览器名称； navigator.appVersion：浏览器版本； navigator.language：浏览器设置的语言； navigator.platform：操作系统类型； navigator.userAgent：浏览器设定的User-Agent字符串。 注:navigator的信息可以很容易地被用户修改 screenscreen对象表示屏幕的信息，常用的属性有： screen.width：屏幕宽度，以像素为单位； screen.height：屏幕高度，以像素为单位； screen.colorDepth：返回颜色位数，如8、16、24。 locationlocation对象表示当前页面的URL信息。 location.href：http://www.example.com:8080/path/index.html?a=1&amp;b=2#TOP location.protocol; // &apos;http&apos; location.host; // &apos;www.example.com&apos; location.port; // &apos;8080&apos; location.pathname; // &apos;/path/index.html&apos; location.search; // &apos;?a=1&amp;b=2&apos; location.hash; // &apos;TOP&apos; 要加载一个新页面，可以调用location.assign()。如果要重新加载当前页面，调用location.reload()方法非常方便 documentdocument对象表示当前页面。由于HTML在浏览器中以DOM形式表示为树形结构，document对象就是整个DOM树的根节点 用document对象提供的getElementById()和getElementsByTagName()可以按ID获得一个DOM节点和按Tag名称获得一组DOM节点 JavaScript可以通过document.cookie读取到当前页面的Cookie,服务器在设置Cookie时可以使用httpOnly，设定了httpOnly的Cookie将不能被JavaScript读取 historyhistory对象保存了浏览器的历史记录，JavaScript可以调用history对象的back()或forward ()，相当于用户点击了浏览器的“后退”或“前进”按钮 任何情况，你都不应该使用history这个对象了 操作DOM 当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。 HTML DOM 模型被构造为对象的树。 通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML: JavaScript 能够改变页面中的所有HTML元素 JavaScript 能够改变页面中的所有HTML属性 JavaScript 能够改变页面中的所有 CSS 样式 JavaScript 能够对页面中的所有事件做出反应 查找HTML元素: document.getElementById()通过 id 找到HTML元素 document.getElementsByTagName()通过标签名找到HTML元素 document.getElementsByClassName()通过类名找到HTML元素 第二种方法是使用querySelector()和querySelectorAll()，需要了解selector语法，然后使用条件来获取节点 更新DOM改变HTML输出流JavaScript 能够创建动态的HTML内容：JavaScript 中，document.write()可用于直接向HTML输出流写内容: document.getElementById(id).write(‘text’) 改变HTML内容修改HTML内容的最简单的方法时使用 innerHTML 属性。 document.getElementById(id).innerHTML = newHTML 第二种是修改innerText或textContent属性，这样可以自动对字符串进行HTML编码，保证无法设置任何HTML标签 document.getElementById(id).innerText = newText document.getElementById(id).textContent = newText 两者的区别在于读取属性时，innerText不返回隐藏元素的文本，而textContent返回所有文本 改变 HTML 属性如需改变 HTML 元素的属性，请使用这个语法： document.getElementById(id).attribute = newValue 修改CSS也是经常需要的操作。DOM节点的style属性对应所有的CSS，可以直接获取或设置。因为CSS允许font-size这样的名称，但它并非JavaScript有效的属性名，所以需要在JavaScript中改写为驼峰式命名fontSize document.getElementById(id).style.attribute = newValue 插入DOM一个是使用appendChild，把一个子节点添加到父节点的最后一个子节点: document.getElementById(id).appendChild(HTML) 动态创建一个节点然后添加到DOM树中: document.createElement(‘tag’) 如果我们要把子节点插入到指定的位置怎么办？可以使用: parentElement.insertBefore(newElement, referenceElement) 删除DOM要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的removeChild把自己删掉： var self = document.getElementById(‘to-be-removed’); var parent = self.parentElement; var removed = parent.removeChild(self); removed === self; // true 当你遍历一个父节点的子节点并进行删除操作时，要注意，children属性是一个只读属性，并且它在子节点变化时会实时更新 操作表单 用JavaScript操作表单和操作DOM是类似的，因为表单本身也是DOM树 不过表单的输入框、下拉框等可以接收用户输入，所以用JavaScript来操作表单，可以获得用户输入的内容，或者对一个输入框设置新的内 HTML表单的输入控件主要有以下几种： 文本框，对应的&lt;input type=&quot;text&quot;&gt;，用于输入文本； 口令框，对应的&lt;input type=&quot;password&quot;&gt;，用于输入口令； 单选框，对应的&lt;input type=&quot;radio&quot;&gt;，用于选择一项； 复选框，对应的&lt;input type=&quot;checkbox&quot;&gt;，用于选择多项； 下拉框，对应的&lt;select&gt;，用于选择一项； 隐藏文本，对应的&lt;input type=&quot;hidden&quot;&gt;，用户不可见，但表单提交时会把隐藏文本发送到服务器。 修改值如果我们获得了一个&lt;input&gt;节点的引用，就可以直接调用value获得对应的用户输入值。这种方式可以应用于text、password、hidden以及select。但是，对于单选框和复选框，value属性返回的永远是HTML预设的值，而我们需要获得的实际是用户是否“勾上了”选项，所以应该用checked判断 设置值对于text、password、hidden以及select，直接设置value就可以，对于单选框和复选框，设置checked为true或false即可 提交表单方式一是通过&lt;form&gt;元素的submit()方法提交一个表单，例如，响应一个&lt;button&gt;的click事件，在JavaScript代码中提交表单 第二种方式是响应&lt;form&gt;本身的onsubmit事件，在提交form时作修改 注:要return true来告诉浏览器继续提交，如果return false，浏览器将不会继续提交form 很多登录表单希望用户输入用户名和口令，但是，安全考虑，提交表单时不传输明文口令，而是口令的 pwd.value = toMD5(pwd.value); 操作文件 在HTML表单中，可以上传文件的唯一控件就是&lt;input type=&quot;file&quot;&gt; 注意：当一个表单包含&lt;input type=&quot;file&quot;&gt;时，表单的enctype必须指定为multipart/form-data，method必须指定为post，浏览器才能正确编码并以multipart/form-data格式发送表单的数据。 HTML5的File API提供了File和FileReader两个主要对象，可以获得文件信息并读取文件 JavaScript中，执行多任务实际上都是异步调，所以我们在JavaScript代码中就不知道什么时候操作结束，因此需要先设置一个回调函数。当文件读取完成后，JavaScript引擎将自动调用我们设置的回调函数。执行回调函数时，文件已经读取完毕，所以我们可以在回调函数内部安全地获得文件内容 AJAX AJAX(Asynchronous JavaScript and XML)异步的JavaScript和XML AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术 AJAX请求是异步执行的，也就是说，要通过回调函数获得响应，在现代浏览器上写AJAX主要依靠XMLHttpRequest对象（IE5 和 IE6 使用 ActiveXObject） var xmlhttp; if (window.XMLHttpRequest){ xmlhttp=new XMLHttpRequest(); }else{ xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } function success(text) { var textarea = document.getElementById(&apos;test-response-text&apos;); textarea.value = text; } function fail(code) { var textarea = document.getElementById(&apos;test-response-text&apos;); textarea.value = &apos;Error code: &apos; + code; } var request = new XMLHttpRequest(); // 新建XMLHttpRequest对象 request.onreadystatechange = function () { // 状态发生变化时，函数被回调 if (request.readyState === 4) { // 成功完成 // 判断响应结果: if (request.status === 200) { // 成功，通过responseText拿到响应的文本: return success(request.responseText); } else { // 失败，根据响应码判断失败原因: return fail(request.status); } } else { // HTTP请求还在继续... } } // 发送请求: request.open(&apos;GET&apos;, &apos;/&apos;); request.send(); alert(&apos;请求已发送，请等待响应...&apos;); 当创建了XMLHttpRequest对象后，要先设置onreadystatechange的回调函数。在回调函数中，通常我们只需通过readyState === 4判断请求是否完成，如果已完成，再根据status === 200判断是否是一个成功的响应。 XMLHttpRequest对象的open()方法有3个参数，第一个参数指定是GET还是POST，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是true，所以不用写 最后调用send()方法才真正发送请求。GET请求不需要参数，POST请求需要把body部分以字符串或者FormData对象传进去 安全限制默认情况下，JavaScript在发送AJAX请求时，URL的域名必须和当前页面完全一致 JavaScript请求外域（就是其他网站）的URL：一是通过Flash插件发送HTTP请求；二是通过在同源域名下架设一个代理服务器来转发，JavaScript负责把请求发送到代理服务器： ‘/proxy?url=http://www.sina.com.cn‘ 第三种方式称为JSONP，它有个限制，只能用GET请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源： CORS如果浏览器支持HTML5，那么就可以一劳永逸地使用新的跨域策略：CORS了。 CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源 Promise 在JavaScript的世界中，所有代码都是单线程执行的。 由于这个“缺陷”，导致JavaScript的所有网络操作，浏览器事件，都必须是异步执行。异步执行可以用回调函数实现 上一节的AJAX异步执行函数转换为Promise对象，看看用Promise如何简化异步处理 // ajax函数将返回Promise对象: function ajax(method, url, data) { var request = new XMLHttpRequest(); return new Promise(function (resolve, reject) { request.onreadystatechange = function () { if (request.readyState === 4) { if (request.status === 200) { resolve(request.responseText); } else { reject(request.status); } } }; request.open(method, url); request.send(data); }); } var log = document.getElementById(&apos;test-promise-ajax-result&apos;); var p = ajax(&apos;GET&apos;, &apos;/api/categories&apos;); p.then(function (text) { // 如果AJAX成功，获得响应内容 log.innerText = text; }).catch(function (status) { // 如果AJAX失败，获得响应代码 log.innerText = &apos;ERROR: &apos; + status; }); 注：这段需要重新学习研究 Canvas Canvas是HTML5新增的组件，它就像一块幕布，可以用JavaScript在上面绘制各种图表、动画等 一个Canvas定义了一个指定尺寸的矩形框，在这个范围内我们可以随意绘制： &lt;canvas id=&quot;test-canvas&quot; width=&quot;300&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt; getContext(&#39;2d&#39;)方法让我们拿到一个CanvasRenderingContext2D对象，所有的绘图操作都需要通过这个对象完成 var ctx - canvas.getContext(&apos;2d&apos;); //绘制2D var gl = canvas.getCOntext(&apos;webgl&apos;); //绘制3D Canvas的坐标系统： Canvas除了能绘制基本的形状和文本，还可以实现动画、缩放、各种滤镜和像素转换等高级操作。如果要实现非常复杂的操作，考虑以下优化方案： 通过创建一个不可见的Canvas来绘图，然后将最终绘制结果复制到页面的可见Canvas中； 尽量使用整数坐标而不是浮点数； 可以创建多个重叠的Canvas绘制不同的层，而不是在一个Canvas中绘制非常复杂的图； 背景图片如果不变可以直接用&lt;img&gt;标签并放到最底层。]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-对象]]></title>
    <url>%2F2017%2F07%2F15%2F2017-07-15-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[目录 标准对象 Date RegExp JSON 面向对象编程 创建对象 原型继承 class继承 标准对象 在JavaScript的世界里，一切都是对象。 但是某些对象还是和其他对象不太一样。为了区分对象的类型，我们用typeof操作符获取对象的类型，它总是返回一个字符串： typeof 123; // &apos;number&apos; typeof NaN; // &apos;number&apos; typeof &apos;str&apos;; // &apos;string&apos; typeof true; // &apos;boolean&apos; typeof undefined; // &apos;undefined&apos; typeof Math.abs; // &apos;function&apos; typeof null; // &apos;object&apos; typeof []; // &apos;object&apos; typeof {}; // &apos;object&apos; number、boolean和string都有包装对象。没错，在JavaScript中，字符串也区分string类型和它的包装类型。包装对象用new创建： var n = new Number(123); // 123,生成了新的包装类型 typeof new Number(123); // &apos;object&apos; var b = new Boolean(true); // true,生成了新的包装类型 var s = new String(&apos;str&apos;); // &apos;str&apos;,生成了新的包装类型 总结一下，有这么几条规则需要遵守： 不要使用new Number()、new Boolean()、new String()创建包装对象； 用parseInt()或parseFloat()来转换任意类型到number； 用String()来转换任意类型到string，或者直接调用某个对象的toString()方法； 通常不必把任意类型转换为boolean再判断，因为可以直接写if (myVar) {…}； typeof操作符可以判断出number、boolean、string、function和undefined； 判断Array要使用Array.isArray(arr)； 判断null请使用myVar === null； 判断某个全局变量是否存在用typeof window.myVar === ‘undefined’； 函数内部判断某个变量是否存在用typeof myVar === ‘undefined’。 注：number对象调用toString()报SyntaxError Date 在JavaScript中，Date对象用来表示日期和时间。 var now = new Date(); now; // Wed Jun 24 2015 19:49:22 GMT+0800 (CST) now.getFullYear(); // 2015, 年份 now.getMonth(); // 5, 月份，注意月份范围是0~11，5表示六月 now.getDate(); // 24, 表示24号 now.getDay(); // 3, 表示星期三 now.getHours(); // 19, 24小时制 now.getMinutes(); // 49, 分钟 now.getSeconds(); // 22, 秒 now.getMilliseconds(); // 875, 毫秒数 now.getTime(); // 1435146562875, 以number形式表示的时间戳 RegExp 在正则表达式中，如果直接给出字符，就是精确匹配 \d 可以匹配一个数字 \w 可以匹配一个字母或数字 . 可以匹配任意字符 * 表示任意个字符（包括0个） + 表示至少一个字符 ? 表示0个或1个字符 {n} 表示n个字符 {n,m} 表示n-m个字符 \s 可以匹配一个空格 [] 表示范围 A|B 可以匹配A或B ^ 表示行的开头 $ 表示行的结束 JavaScript有两种方式创建一个正则表达式： 第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp(&#39;正则表达式&#39;)创建一个RegExp对象。 两种写法是一样的： var re1 = /ABC\-001/; var re2 = new RegExp(&apos;ABC\\-001&apos;); re1; // /ABC\-001/ re2; // /ABC\-001/ RegExp对象的test()方法用于测试给定的字符串是否符合条件 re1.test(&apos;ABC\-001&apos;) //true split()正则表达式切分字符串比用固定的字符更灵活 &apos;a,b;; c d&apos;.split(/[\s\,\;]+/); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;] 用()表示的就是要提取的分组（Group）。比如：^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码： 正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来 var re = /^(\d{3})-(\d{3,8})$/; re.exec(&apos;010-12345&apos;); // [&apos;010-12345&apos;, &apos;010&apos;, &apos;12345&apos;] re.exec(&apos;010 12345&apos;); // null exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。 贪婪匹配正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符 var re = /^(\d+)(0*)$/; re.exec(&apos;102300&apos;); // [&apos;102300&apos;, &apos;102300&apos;, &apos;&apos;] 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配： var re = /^(\d+?)(0*)$/; re.exec(&apos;102300&apos;); // [&apos;102300&apos;, &apos;1023&apos;, &apos;00&apos;] 全局搜索JavaScript的正则表达式还有几个特殊的标志，最常用的是g，表示全局匹配 全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引 全局匹配类似搜索，因此不能使用/^...$/，那样只会最多匹配一次。 正则表达式还可以指定i标志，表示忽略大小写，m标志，表示执行多行匹配 JSON JSON是JavaScript Object Notation的缩写，它是一种数据交换格式 JSON 是 JS 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串 JSON 数据的书写格式是：名称/值对。名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值 要实现从对象转换为 JSON 字符串，使用 JSON.stringify() 方法： var json = JSON.stringify({a: &apos;Hello&apos;, b: &apos;World&apos;}); //结果是 &apos;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&apos; 要实现从 JSON 转换为对象，使用 JSON.parse() 方法： var obj = JSON.parse(&apos;{&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;}&apos;); //结果是 {a: &apos;Hello&apos;, b: &apos;World&apos;} JSON 最常见的用法之一，是从 web 服务器上读取 JSON 数据（作为文件或作为 HttpRequest），将 JSON 数据转换为 JavaScript 对象，然后在网页中使用该数据。 JavaScript 函数 eval() 可用于将 JSON 文本转换为 JavaScript 对象 面向对象编程 JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。avaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已 直接用obj.__proto__去改变一个对象的原型， var Student = { name: &apos;Robot&apos; }; var xiaoming = { name: &apos;小明&apos; }; xiaoming.__proto__ = Student; 不要直接用obj.__proto__去改变一个对象的原型，Object.create()方法可以传入一个原型对象，并创建一个基于该原型的新对象 var Student = { // 原型对象 name: &apos;Robot&apos;, height: 1.2, run: function () { console.log(this.name + &apos; is running...&apos;); } }; function createStudent(name) { var s = Object.create(Student); // 基于Student原型创建一个新对象: s.name = name;// 初始化新对象: return s; } var xiaoming = createStudent(&apos;小明&apos;); xiaoming.run(); // 小明 is running... xiaoming.__proto__ === Student; // true 创建对象 JavaScript 基于 prototype，而不是基于类的，JavaScript对每个创建的对象都会设置一个原型，指向它的原型对象。 当我们用obj.xxx访问一个对象的属性时，JavaScript引擎先在当前对象上查找该属性，如果没有找到，就到其原型对象上找，如果还没有找到，就一直上溯到Object.prototype对象，最后，如果还没有找到，就只能返回undefined。 例如，创建一个Array对象，其原型链是：arr —-&gt; Array.prototype —-&gt; Object.prototype —-&gt; null 创建新对象有两种不同的方法： 定义并创建对象的实例 使用函数来定义对象，然后创建新的对象实例 除了直接用{ ... }创建一个对象外，JavaScript还可以用一种构造函数的方法来创建对象。它的用法是，先定义一个构造函数，再用关键字new来调用这个函数，并返回一个对象 function Student(name) { this.name = name; this.hello = function () { alert(&apos;Hello, &apos; + this.name + &apos;!&apos;); } } var xiaoming = new Student(&apos;小明&apos;); xiaoming.name; // &apos;小明&apos; xiaoming.hello(); // Hello, 小明! 用new Student()创建的对象还从原型上获得了一个constructor属性，它指向函数Student本身 新创建的xiaoming的原型链是： 共享同一个函数可以将函数绑定到函数原型上，如Student.prototype: function Student(name) { this.name = name; } Student.prototype.hello = function () { alert(&apos;Hello, &apos; + this.name + &apos;!&apos;); }; 原型继承 我们必须借助一个中间对象来实现正确的原型链，这个中间对象的原型要指向Student.prototype。为了实现这一点，参考道爷（就是发明JSON的那个道格拉斯）的代码，中间对象可以用一个空函数F来实现： // PrimaryStudent构造函数: function PrimaryStudent(props) { Student.call(this, props); this.grade = props.grade || 1; } // 空函数F: function F() { } // 把F的原型指向Student.prototype: F.prototype = Student.prototype; // 把PrimaryStudent的原型指向一个新的F对象，F对象的原型正好指向Student.prototype: PrimaryStudent.prototype = new F(); // 把PrimaryStudent原型的构造函数修复为PrimaryStudent: PrimaryStudent.prototype.constructor = PrimaryStudent; // 继续在PrimaryStudent原型（就是new F()对象）上定义方法： PrimaryStudent.prototype.getGrade = function () { return this.grade; }; // 创建xiaoming: var xiaoming = new PrimaryStudent({ name: &apos;小明&apos;, grade: 2 }); xiaoming.name; // &apos;小明&apos; xiaoming.grade; // 2 // 验证原型: xiaoming.__proto__ === PrimaryStudent.prototype; // true xiaoming.__proto__.__proto__ === Student.prototype; // true // 验证继承关系: xiaoming instanceof PrimaryStudent; // true xiaoming instanceof Student; // true 原型链图： 如果把继承这个动作用一个inherits()函数封装起来，还可以隐藏F的定义，并简化代码： function inherits(Child, Parent) { var F = function () {}; F.prototype = Parent.prototype; Child.prototype = new F(); Child.prototype.constructor = Child; } JavaScript的原型继承实现方式就是： 定义新的构造函数，并在内部用call()调用希望“继承”的构造函数，并绑定this； 借助中间函数F实现原型链继承，最好通过封装的inherits函数完成； 继续在新的构造函数的原型上定义新方法。 class继承 新的关键字class从ES6开始正式被引入到JavaScript中。class的目的就是让定义类更简单。 用函数实现Student的方法： function Student(name) { this.name = name; } Student.prototype.hello = function () { alert(&apos;Hello, &apos; + this.name + &apos;!&apos;); } 用新的class关键字来编写Student，可以这样写： class Student { constructor(name) { this.name = name; } hello() { alert(&apos;Hello, &apos; + this.name + &apos;!&apos;); } } 原型继承的中间对象，原型对象的构造函数等等都不需要考虑了，直接通过extends来实现： class PrimaryStudent extends Student { constructor(name, grade) { super(name); // 记得用super调用父类的构造方法! this.grade = grade; } myGrade() { alert(&apos;I am at grade &apos; + this.grade); } }]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-函数]]></title>
    <url>%2F2017%2F07%2F14%2F2017-07-14-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[目录 函数 函数定义和调用 变量作用域 方法 高阶函数 闭包 箭头函数 generator 函数 函数定义和调用 定义函数在JavaScript中，定义函数的方式如下： function name(x) { ... } function指出这是一个函数定义；name是函数的名称；(x)括号内列出函数的参数，多个参数以,分隔；{ ... }之间的代码是函数体，可以包含若干语句，甚至可以没有任何语句。 注：如果没有return语句，函数执行完毕后也会返回结果，只是结果为undefined。 由于JavaScript的函数也是一个对象，上述定义的函数实际上是一个函数对象，而函数名name可以视为指向该函数的变量。 因此，第二种定义函数的方式如下： var name = function (x) { ... }; 在这种方式下，function (x) { … }是一个匿名函数，它没有函数名。但是，这个匿名函数赋值给了变量name，所以，通过变量name就可以调用该函数。 上述两种定义完全等价，注意第二种方式按照完整语法需要在函数体末尾加一个;，表示赋值语句结束。 调用函数由于JavaScript允许传入任意个参数而不影响调用，因此传入的参数比定义的参数多也没有问题，虽然函数内部并不需要这些参数 传入的参数比定义的少也没有问题： abs(); // 返回NaN 此时abs(x)函数的参数x将收到undefined，计算结果为NaN。 argumentJavaScript还有一个免费赠送的关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。也就是说，即使函数不定义任何参数，还是可以拿到参数的值 restrest参数只能写在最后，前面用...标识，从运行结果可知，传入的参数先绑定a、b，多余的参数以数组形式交给变量rest，所以，不再需要arguments我们就获取了全部参数。如果传入的参数连正常定义的参数都没填满，也不要紧，rest参数会接收一个空数组（注意不是undefined）。 注：前面我们讲到了JavaScript引擎有一个在行末自动添加分号的机制，这可能让你栽到return语句的一个大坑 变量作用域 在JavaScript中，用var申明的变量实际上是有作用域的。 变量提升JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部： &apos;use strict&apos;; function foo() { var x = &apos;Hello, &apos; + y; alert(x); // 没有报错输出&apos;Hello, undefined&apos; var y = &apos;Bob&apos;; //变量y`提升`了 } foo(); 由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。 全局作用域不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性： var c = &apos;1&apos;; //相当于window.c = &apos;1&apos;; var f = foo(){} //相当于window.f = f(); 全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如： // 唯一的全局变量MYAPP: var MYAPP = {}; // 其他变量: MYAPP.name = &apos;myapp&apos;; MYAPP.version = 1.0; // 其他函数: MYAPP.foo = function () { return &apos;foo&apos;; }; 局部作用域如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量。由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行 由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的。为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量： 常量由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”： var PI = 3.14; ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域： &apos;use strict&apos;; const PI = 3.14; PI = 3; PI //3.14 【补充】： const 常量 let 变量，块作用域，不能重复声明覆盖 var 变量，函数作用域，能重复声明覆盖 赋值之后不会再做修改了就用const，如果后边还会修改就用let，不建议使用var 方法 this在JavaScript中，对象的定义是这样的： var xiaoming = { name: &apos;小明&apos;, birth: 1990, age: function () { var y = new Date().getFullYear(); return y - this.birth; } }; 绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字，在一个方法内部，this是一个特殊变量，它始终指向当前对象，也就是xiaoming这个变量。 让我们拆开写： function getAge() { var y = new Date().getFullYear(); return y - this.birth; } var xiaoming = { name: &apos;小明&apos;, birth: 1990, age: getAge }; xiaoming.age(); // 25, 正常结果 getAge(); // NaN, 若在strict模式下将得到一个错误 如果以对象的方法形式调用，比如xiaoming.age()，该函数的this指向被调用的对象，也就是xiaoming，这是符合我们预期的。 如果单独调用函数，比如getAge()，此时，该函数的this指向全局对象，也就是window。 由于这是一个巨大的设计错误，要想纠正可没那么简单。ECMA决定，在strict模式下让函数的this指向undefined，因此，在strict模式下，你会得到一个错误. apply要指定函数的this指向哪个对象，可以用函数本身的apply方法，它接收两个参数，第一个参数就是需要绑定的this变量，第二个参数是Array，表示函数本身的参数。 用apply修复getAge()调用： getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空 另一个与apply()类似的方法是call()，唯一区别是：apply()把参数打包成Array再传入；call()把参数按顺序传入。 比如调用Math.max(3, 5, 4)，分别用apply()和call()实现如下： Math.max.apply(null, [3, 5, 4]); // 5 Math.max.call(null, 3, 5, 4); // 5 高阶函数 函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数 mapmap()方法定义在JavaScript的Array中，我们调用Array的map()方法，传入我们自己的函数，就得到了一个新的Array作为结果 reduceArray的reduce()把一个函数作用在这个Array的[x1, x2, x3...]上，这个函数必须接收两个参数，reduce()把结果继续和序列的下一个元素做累积计算 filterArray的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。通常我们仅使用第一个参数，表示Array的某个元素，还可以接收另外两个参数，表示元素的位置和数组本身 sortArray的sort()方法默认把所有元素先转换为String再排序: [10, 20, 1, 2].sort(); // [1, 10, 2, 20] sort()方法也是一个高阶函数，它还可以接收一个比较函数来实现自定义的排序。要按数字大小排序，我们可以自建函数 闭包 高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。 需要注意的问题是，返回的函数并没有立刻执行，而是直到调用了f()才执行。我们来看一个例子： function count() { var arr = []; for (var i=1; i&lt;=3; i++) { arr.push(function () { return i * i; }); } return arr; } var results = count(); var f1 = results[0]; var f2 = results[1]; var f3 = results[2]; 在上面的例子中，每次循环，都创建了一个新的函数，然后，把创建的3个函数都添加到一个Array中返回了。 你可能认为调用f1()，f2()和f3()结果应该是1，4，9，但实际结果是： f1(); // 16 f2(); // 16 f3(); // 16 全部都是16！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了4，因此最终结果为16。 返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。 箭头函数 ES6标准新增了一种新的函数：Arrow Function（箭头函数）。为什么叫Arrow Function？因为它的定义用的就是一个箭头： x =&gt; x * x 上面的箭头函数相当于： function (x) { return x * x; } 箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种像上面的，只包含一个表达式，连{ ... }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ ... }和return： x =&gt; { ... } 如果参数不是一个，就需要用括号()括起来： (x, y) =&gt; x * x + y * y 箭头函数看上去是匿名函数的一种简写，但实际上，箭头函数和匿名函数有个明显的区别：箭头函数内部的this是词法作用域，由上下文确定 var obj = { birth: 1990, getAge: function () { var b = this.birth; // 1990 var fn = () =&gt; new Date().getFullYear() - this.birth; // this指向obj对象 return fn(); } }; obj.getAge(); // 25 generator generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。 函数在执行过程中，如果没有遇到return语句（函数末尾如果没有return，就是隐含的return undefined;），控制权无法交回被调用的代码。generator和函数不同的是，generator由function*定义（注意多出的*号），并且，除了return语句，还可以用yield返回多次。 function* fib(max) { var t, a = 0, b = 1, n = 1; while (n &lt; max) { yield a; t = a + b; a = b; b = t; n ++; } return a; } 调用generator对象有两个方法，一是不断地调用generator对象的next()方法 var f = fib(1); f.next(); // {value: 0, done: false} //每次遇到`yield x`;就返回一个对象`{value: x, done: true/false}` f.next(); // {value: 1, done: done} f.next(); // {value: undefine, done: done} //最后返回一个undefined 第二个方法是直接用for ... of循环迭代generator对象，这种方式不需要我们自己判断done： for (var x of fib(5)) { console.log(x); // 依次输出0, 1, 1, 2, 3 } function* next_id() { for (let i=1; i&lt;1000; i++){ yield i; }}]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS盒子模型]]></title>
    <url>%2F2017%2F07%2F11%2F2017-07-11-css-box-model%2F</url>
    <content type="text"><![CDATA[CSS框模型概述所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。 下面的图片说明了盒子模型(Box Model)： 不同部分的说明： Margin(外边距) - 清除边框外的区域，外边距是透明的。 Border(边框) - 围绕在内边距和内容外的边框。 Padding(内边距) - 清除内容周围的区域，内边距是透明的。 Element(元素) - 盒子的内容，显示HTML元素。 盒子模型的3D效果图： ###]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript-快速入门]]></title>
    <url>%2F2017%2F07%2F09%2F2017-07-09-JavaScript-Tutorial%2F</url>
    <content type="text"><![CDATA[JS这块学的比较杂，希望能够自己在整理一遍，博客完全是根据W3school 和 廖雪峰JavaScript教程总结完成的 目录JavaScript教程 JavaScript简介 快速入门 基本语法 数据类型和变量 字符串 数组 对象 条件判断 循环 Map和Set iterable 错误处理 JavaScript简介 JavaScript一种直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。它的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。 基本特性 是一种解释性脚本语言（代码不进行预编译）。 主要用来向HTML（标准通用标记语言下的一个应用）页面添加交互行为。 可以直接嵌入HTML页面，但写成单独的js文件有利于结构和行为的分离。 跨平台特性，在绝大多数浏览器的支持下，可以在多种平台下运行（如Windows、Linux、Mac、Android、iOS等）。 JavaScript语言中采用的是弱类型的变量类型,对使用的数据类型未做出严格的要求,是基于Java基本语句和控制的脚本语言,其设计简单紧凑。 动态性。JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。在访问一个网页时,鼠标在网页中进行鼠标点击或上下移、窗口移动等操作JavaScript都可直接对这些事件给出相应的响应。 Javascript脚本语言同其他语言一样，有它自身的基本数据类型，表达式和算术运算符及程序的基本程序框架。Javascript提供了四种基本的数据类型和两种特殊数据类型用来处理数据和文字。而变量提供存放信息的地方，表达式则可以完成较复杂的信息处理。 日常用途JavaScript是一种属于网络的脚本语言,已经被广泛用于Web应用开发,常用来为网页添加各式各样的动态功能,为用户提供更流畅美观的浏览效果。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。 嵌入动态文本于HTML页面。 对浏览器事件做出响应。 读写HTML元素。 在数据被提交到服务器之前验证数据。 检测访客的浏览器信息。 控制cookies，包括创建和修改等。 基于Node.js技术进行服务器端编程。 JS实现HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。（最好放在body底部） 快速入门基本语法 语法JavaScript的语法和Java语言类似，每个语句以;结束，语句块用{...}。但是，JavaScript并不强制要求在每个语句的结尾加;，浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上; 注意：让JavaScript引擎自动加分号在某些情况下会改变程序的语义，导致运行结果与期望不一致。在本教程中，我们不会省略;，所有语句都会添加;。 注释以//开头直到行末的字符被视为行注释，用/*...*/把多行字符包裹起来，把一大“块”视为一个注释 数据类型和变量 数据类型 Nndefined: 在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。 对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。 Null:null类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。可以通过将变量的值设置为 null 来清空变量。 Boolean:即布尔类型，该类型有两个值：true false Number:JavaScript不区分整数和浮点数，统一用Number表示， 整数,可以通过十进制，八进制，十六进制的字面值来表示。 浮点数 NaN,即非数值，是一个特殊的值，这个数值用于表示一个本来要返回数值的操作数，未返回数值的情况。 String:字符串类型是最熟悉不过的啦，至于用单引号，还是双引号，在js中还是没有差别的。记得成对出现。 Object:JavaScript的对象是一组由键-值组成的无序集合。JavaScript对象的键都是字符串类型，值可以是任意数据类型。该类型实例化的对象，是一组数据和功能（函数）的集合。 变量、运算符第一种是==比较：它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果； 第二种是===比较：它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。 由于JavaScript这个设计缺陷，不要使用==比较，始终坚持使用===比较。 另一个例外是NaN这个特殊的Number与所有其他值都不相等，包括它自己： NaN === NaN; // false 唯一能判断NaN的方法是通过isNaN()函数： isNaN(NaN); // true 变量在JavaScript中就是用一个变量名表示，变量名是大小写英文、数字、$和_的组合，且不能用数字开头。 strict模式如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量。 i = 10；//i现在是全局变量 在同一个页面的不同的JavaScript文件中，如果都不用var申明，恰好都使用了变量i，将造成变量i互相影响，产生难以调试的错误结果。 使用var申明的变量则不是全局变量，它的范围被限制在该变量被申明的函数体内（函数的概念将稍后讲解），同名变量在不同的函数体内互不冲突。 为了修补JavaScript这一严重设计缺陷，ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误。 启用strict模式的方法是在JavaScript代码的第一行写上： &apos;use strict&apos;; 字符串 JavaScript的字符串就是用’’或””括起来的字符表示由于多行字符串用\n写起来比较费事，所以最新的ES6标准新增了一种多行字符串的表示方法，用反引号 ` … ` 表示 要把多个字符串连接起来，可以用+号连接 var name = &apos;小明&apos;; var age = 20; var message = &apos;你好, &apos; + name + &apos;, 你今年&apos; + age + &apos;岁了!&apos;; alert(message); ES6新增了一种模板字符串，表示方法和上面的多行字符串一样，但是它会自动替换字符串中的变量： var message = `你好, ${name}, 你今年${age}岁了!`; length：字符串长度，指定字符可用s[i]，与Array操作相似，但是字符串是不可变的 toUpperCase()、toLowerCase()将字符串转换大小写 indexOf()会搜索指定字符串出现的位置 substring()返回指定索引区间的子串 数组 JavaScript的Array可以包含任意数据类型，并通过索引来访问每个元素要取得Array的长度，直接访问length属性：注意:直接给Array的length赋一个新的值会导致Array大小的变化 Array也可以通过indexOf()来搜索一个指定的元素的位置 slice()就是对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉 如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉 sort()可以对当前Array进行排序，它会直接修改当前Array的元素位置，直接调用时，按照默认顺序排序 reverse()把整个Array的元素给掉个个，也就是反转 splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素 concat()方法把当前的Array和另一个Array连接起来，并返回一个新的Array join()方法是一个非常实用的方法，它把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串 对象 JavaScript的对象是一种无序的集合数据类型，它由若干键值对组成。 JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。注意，最后一个键值对不需要在末尾加,，如果加了，有的浏览器（如低版本的IE）将报错 var person = { name: &apos;x&apos;, birth: 1990, school: &apos;shu&apos;, height: 1.70, weight: 65, score: null }; 实际上JavaScript对象的所有属性都是字符串，不过属性对应的值可以是任意数据类型。 如果访问一个不存在的属性会返回什么呢？JavaScript规定，访问不存在的属性不报错，而是返回undefined。由于JavaScript的对象是动态类型，你可以自由地给一个对象添加或删除属性： person.age //undefined person.age = 12 delete person.age 如果我们要检测xiaoming是否拥有某一属性，可以用in操作符: &apos;name&apos; in person; //true &apos;grade&apos; in person; //false 要判断一个属性是否是xiaoming自身拥有的，而不是继承得到的，可以用hasOwnProperty()方法 条件判断 JavaScript使用if () { ... } else { ... }来进行条件判断，其中else语句是可选的。 JavaScript把null、undefined、0、NaN和空字符串&#39;&#39;视为false，其他值一概视为true `true` == true //false 在转换不同的数据类型时，相等或者不相等应遵循一下几条规则： 如果有一个操作数是布尔值，则在比较相等之前将其转换为数值–false转换为0，true转换为1； 如果一个操作数是字符串，另一个操作符是数值，则在比较相等之前先讲字符串转换为数值； 如果一个操作数是对象，另一个操作数不是，则调用对象的valueOf()方法，用得到的基本类型值按照前面的规则进行比较。 回到这个题目中，根据规则1，先将布尔值转换为数值1，变换为字符串和数值的比较。再根据规则2，将字符串转为数值NaN。显然不等。 循环 JavaScript的循环有两种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块 for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，就必须使用break语句退出循环，否则就是死循环 for循环的一个变体是for ... in循环，它可以把一个对象的所有属性依次循环出来: var o = { name: &apos;Jack&apos;, age: 20, city: &apos;Beijing&apos; }; for (var key in o) { alert(key); // &apos;name&apos;, &apos;age&apos;, &apos;city&apos; } 注：for ... in对Array的循环得到的是String而不是Numbe while循环只有一个判断条件，条件满足，就不断循环，条件不满足时则退出循环。 最后一种循环是do { ... } while()循环，它和while循环的唯一区别在于，不是在每次循环开始的时候判断条件，而是在每次循环完成的时候判断条件 Map和Set JavaScript的默认对象表示方式{}可以视为其他语言中的Map或Dictionary的数据结构，即一组键值对,但是JavaScript的对象有个小问题，就是键必须是字符串。但实际上Number或者其他数据类型作为键也是非常合理的。为了解决这个问题，最新的ES6规范引入了新的数据类型Map。 MapMap是一组键值对的结构，具有极快的查找速度。用JavaScript写一个Map如下： var m = new Map([[&apos;Michael&apos;, 95], [&apos;Bob&apos;, 75], [&apos;Tracy&apos;, 85]]); m.get(&apos;Michael&apos;); // 95 初始化Map需要一个二维数组，或者直接初始化一个空Map。Map具有以下方法： var m = new Map(); // 空Map m.set(&apos;Adam&apos;, 67); // 添加新的key-value m.set(&apos;Bob&apos;, 59); m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true m.get(&apos;Adam&apos;); // 67 m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos; m.get(&apos;Adam&apos;); // undefined SetSet和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。要创建一个Set，需要提供一个Array作为输入，或者直接创建一个空Set： var s1 = new Set(); // 空Set var s2 = new Set([1, 2, 3]); // 含1, 2, 3 重复元素在Set中自动被过滤： var s = new Set([1, 2, 3, 3, &apos;3&apos;]); s; // Set {1, 2, 3, &quot;3&quot;} 通过add(key)方法可以添加元素到Set中，可以重复添加，但不会有效果。通过delete(key)方法可以删除元素 iterable 遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。具有iterable类型的集合可以通过新的for ... of循环来遍历。 for ... in循环将把name包括在内，但Array的length属性却不包括在内: var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; a.name = &apos;Hello&apos;; for (var x in a) { alert(x); // &apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;name&apos; } for ... of循环则完全修复了这些问题，它只循环集合本身的元素： var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; a.name = &apos;Hello&apos;; for (var x of a) { alert(x); // &apos;A&apos;, &apos;B&apos;, &apos;C&apos; } 然而，更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。以Array为例: var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; a.forEach(function (element, index, array) { // element: 指向当前元素的值 // index: 指向当前索引 // array: 指向Array对象本身 alert(element); }); Set与Array类似，但Set没有索引，因此回调函数的前两个参数都是元素本身:Map的回调函数参数依次为value、key和map本身 错误处理 使用try ... catch ... finally处理错误时，我们编写的代码如 先执行try { ... }的代码； 执行到出错的语句时，后续语句不再继续执行，转而执行catch (e) { ... }代码； 最后执行finally { ... }代码。 catch和finally可以不必都出现 程序也可以主动抛出一个错误，让执行流程直接跳转到catch块。抛出错误使用throw语句: throw new Error(‘输入错误’) 如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数，如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。 JavaScript引擎是一个事件驱动的执行引擎，代码总是以单线程执行，而回调函数的执行需要等到下一个满足条件的事件出现后，才会被执行 setTimeout()函数可以传入回调函数，并在指定若干毫秒后执行 注:涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行]]></content>
      <categories>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git命令手册]]></title>
    <url>%2F2017%2F07%2F06%2F2017-07-06-git-tutorial%2F</url>
    <content type="text"><![CDATA[这篇文章主要介绍Git分布式版本管理与集中式管理的一些差异，总结下Git常用命令作为日后的速查表，最后介绍Git进阶的一些案例。本文分为以下几个部分： Git常用命令 Git进阶指南 Git常用命令创建复制一个已创建的仓库: $ git clone ssh://user@domain.com/repo.git 创建一个新的本地仓库: $ git init 本地修改显示工作路径下已修改的文件： $ git status 显示与上次提交版本文件的不同： $ git diff 把当前所有修改添加到下次提交中： $ git add 把对某个文件的修改添加到下次提交中： $ git add -p &lt;file&gt; 提交本地的所有修改： $ git commit -a 提交之前已标记的变化： $ git commit 附加消息提交： $ git commit -m &apos;message here&apos; 提交，并将提交时间设置为之前的某个日期: git commit --date=&quot;`date --date=&apos;n day ago&apos;`&quot; -am &quot;Commit Message&quot; 修改上次提交请勿修改已发布的提交记录! $ git commit --amend 把当前分支中未提交的修改移动到其他分支 git stash git checkout branch2 git stash pop 搜索从当前目录的所有文件中查找文本内容： $ git grep &quot;Hello&quot; 在某一版本中搜索文本： $ git grep &quot;Hello&quot; v2.5 提交历史从最新提交开始，显示所有的提交记录（显示hash， 作者信息，提交的标题和时间）： $ git log 显示所有提交（仅显示提交的hash和message）： $ git log --oneline 显示某个用户的所有提交： $ git log --author=&quot;username&quot; 显示某个文件的所有修改： $ git log -p &lt;file&gt; 谁，在什么时间，修改了文件的什么内容： $ git blame &lt;file&gt; 分支与标签列出所有的分支： $ git branch 切换分支： $ git checkout &lt;branch&gt; 创建并切换到新分支: $ git checkout -b &lt;branch&gt; 基于当前分支创建新分支： $ git branch &lt;new-branch&gt; 基于远程分支创建新的可追溯的分支： $ git branch --track &lt;new-branch&gt; &lt;remote-branch&gt; 删除本地分支: $ git branch -d &lt;branch&gt; 给当前版本打标签： $ git tag &lt;tag-name&gt; 更新与发布列出当前配置的远程端： $ git remote -v 显示远程端的信息： $ git remote show &lt;remote&gt; 添加新的远程端： $ git remote add &lt;remote&gt; &lt;url&gt; 下载远程端版本，但不合并到HEAD中： $ git fetch &lt;remote&gt; 下载远程端版本，并自动与HEAD版本合并： $ git remote pull &lt;remote&gt; &lt;url&gt; 将远程端版本合并到本地版本中： $ git pull origin master 将本地版本发布到远程端： $ git push remote &lt;remote&gt; &lt;branch&gt; 删除远程端分支： $ git push &lt;remote&gt; :&lt;branch&gt; (since Git v1.5.0) 或 git push &lt;remote&gt; --delete &lt;branch&gt; (since Git v1.7.0) 发布标签: $ git push --tags 合并与重置将分支合并到当前HEAD中： $ git merge &lt;branch&gt; 将当前HEAD版本重置到分支中:请勿重置已发布的提交! $ git rebase &lt;branch&gt; 退出重置: $ git rebase --abort 解决冲突后继续重置： $ git rebase --continue 使用配置好的merge tool 解决冲突： $ git mergetool 在编辑器中手动解决冲突后，标记文件为已解决冲突 $ git add &lt;resolved-file&gt; $ git rm &lt;resolved-file&gt; 撤销放弃工作目录下的所有修改： $ git reset --hard HEAD 移除缓存区的所有文件（i.e. 撤销上次git add）: $ git reset HEAD 放弃某个文件的所有本地修改： $ git checkout HEAD &lt;file&gt; 重置一个提交（通过创建一个截然不同的新提交） $ git revert &lt;commit&gt; 将HEAD重置到指定的版本，并抛弃该版本之后的所有修改： $ git reset --hard &lt;commit&gt; 将HEAD重置到上一次提交的版本，并将之后的修改标记为未添加到缓存区的修改： $ git reset &lt;commit&gt; 将HEAD重置到上一次提交的版本，并保留未提交的本地修改： $ git reset --keep &lt;commit&gt; Git进阶指南问：如何修改 origin 仓库信息？1、添加 origin 仓库信息git remote add origin &lt;git仓库地址&gt; 2、查看 origin 仓库信息# 以下三种方式均可 git config get --remote.origin.url git remote -v git remote show origin 3、删除 origin 仓库信息git remote rm origin 问：如何配置 git ssh keys ？在本地生成 ssh 私钥 / 公钥 文件将「公钥」添加到 git 服务（github、gitlab、coding.net 等）网站后台测试 git ssh 连接是否成功接下来以添加 github ssh keys 为例，请注意替换 github 文件名。 注：如果对密钥机制不熟悉，建议不要指定 -f 参数，直接使用默认的 id_rsa 文件名。 # 运行以下命令，一直回车，文件名可随意指定 ssh-keygen -t rsa -b 4096 -C &quot;kaiye@macbook&quot; -f ~/.ssh/github # 如果不是默认密钥 id_rsa ，则需要以下命令注册密钥文件，-K 参数将密钥存入 Mac Keychain ssh-add -K ~/.ssh/github # 将 pub 公钥的内容粘贴到线上网站的后台 cat ~/.ssh/github.pub # 测试 git ssh 是否连接成功 ssh -T git@github.com 问：如何撤销修改？ 修改包含四种情况，需单独区分。 1、新建的文件和目录，且从未提交至版本库 此类文件的状态为 Untracked files ，撤销方法如下： git clean -fd . 其中，. 表示当前目录及所有子目录中的文件，也可以直接指定对应的文件路径，以下其他情况类似。 2、提交过版本库，但未提交至暂存区的文件（未执行 git add） 此类文件的状态为Changes not staged for commit，撤销方法： git checkout . 3、已提交至暂存区的文件 此类文件的状态为 Changes to be committed，撤销方法： git reset . 执行之后文件将会回到以上的 1 或者 2 状态，可继续按以上步骤执行撤销，若 git reset 同时加上 –hard 参数，将会把修改过的文件也还原成版本库中的版本。 4、已提交至版本库（执行了 git commit） 每次提交都会生成一个 hash 版本号，通过以下命令可查阅版本号并将其回滚： git log git reset &lt;版本号&gt; 如果需要「回滚至上一次提交」，可直接使用以下命令： git reset head~1 执行之后，再按照 1 或者 2 状态进行处理即可，如果回滚之后的代码同时需要提交至 origin 仓库（即回滚 origin 线上仓库的代码），需要使用 -f 强制提交参数，且当前用户需要具备「强制提交的权限」。 5、如果回滚了之后又不想回滚了怎么办？ 如果是以上的情况 1 或者 2，只能歇屁了，因为修改没入过版本库，无法回滚。 如果是情况 4，回滚之后通过 git log 将看不到回滚之前的版本号，但可通过 git reflog 命令（所有使用过的版本号）找到回滚之前的版本号，然后 git reset &lt;版本号&gt; 。 问：遇到冲突了怎么解决？ 两个分支进行合并时（通常是 git pull 时），可能会遇到冲突，同时被修改的文件会进入 Unmerged 状态，需要解决冲突。 1、最快的办法 大部分时候，「最快解决冲突」的办法是：使用当前 HEAD 的版本（ours），或使用合并进来的分支版本（theirs）。 # 使用当前分支 HEAD 版本，通常是冲突源文件的 &lt;&lt;&lt;&lt;&lt;&lt;&lt; 标记部分，======= 的上方 git checkout --ours &lt;文件名&gt; # 使用合并分支版本，通常是源冲突文件的 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 标记部分 git checkout --theirs &lt;文件名&gt; # 标记为解决状态加入暂存区 git add &lt;文件名&gt; 2、最通用的办法 用编辑器打开冲突的源文件进行修改，可能会发生遗留，且体验不好，通常需要借助 git mergetool 命令。 在 Mac 系统下，运行 git mergetool &lt;文件名&gt; 可以开启配置的第三方工具进行 merge，默认的是 FileMerge 应用程序，还可以配置成 Meld 或 kdiff3，体验更佳。 3、最好的习惯 有三个好的习惯，可以减少代码的冲突： 在开始修改代码前先 git pull 一下； 将业务代码进行划分，尽量不要多个人在同一时间段修改同一文件； 通过Gitflow 工作流也可以提升 git流程效率，减少发生冲突的可能性。 4、最复杂的情况 如果你的项目周期比较长，还应该养成「定期 rebase 的习惯」，git pull –rebase 可以让分支的代码和 origin 仓库的代码保持兼容，同时还不会破坏线上代码的可靠性。 它的大概原理是，先将 origin 仓库的代码按 origin 的时间流在本地分支中提交，再将本地分支的修改记录追加到 origin 分支上。如果发生冲突，则可以即时的发现问题并解决，否则到项目上线时再解决冲突，可能会发生额外的风险。 rebase 大概的操作步骤如下： # 将当前分支的版本追加到从远程 pull 回来的节点之后 git pull --rebase # 若发生冲突，则按以上其他方法进行解决，解决后继续 git rebase --continue # 直到所有冲突得以解决，待项目最后上线前再执行 git push origin # 若多次提交修改了同一文件，可能需要直接跳过后续提交，按提示操作即可 git rebase --skip 问：如何在不提交修改的前提下，执行 pull / merge 等操作？ 有些修改没有完全完成之前，可能不需要提交到版本库，圡方法是将修改的文件 copy 到 git 仓库之外的目录临时存放，pull / merge 操作完成之后，再 copy 回来。 这样的做法一个是效率不高，另外一个可能会遗漏潜在的冲突。此类需求最好是通过 git stash 命令来完成，它可以将当前工作状态（WIP，work in progress）临时存放在 stash 队列中，待操作完成后再从 stash 队列中重新应用这些修改。 以下是 git stash 常用命令： # 查看 stash 队列中已暂存了多少 WIP git stash list # 恢复上一次的 WIP 状态，并从队列中移除 git stash pop # 添加当前 WIP，注意：未提交到版本库的文件会自动忽略，只要不运行 git clean -fd . 就不会丢失 git stash # 恢复指定编号的 WIP，同时从队列中移除 git stash pop stash@{num} # 恢复指定编号的 WIP，但不从队列中移除 git stash apply stash@{num} 问：如何在 git log 中查看修改的文件列表？ 默认的 git log 会显示较全的信息，且不包含文件列表。使用 –name-status 可以看到修改的文件列表，使用 –oneline 可以将参数简化成一行。 git log --name-status --oneline 每次手动加上参数很麻烦，可以通过自定义快捷命令的方式来简化操作： git config --global alias.ls &apos;log --name-status --oneline --graph&apos; 运行以上配置后，可通过 git ls 命令来实现「自定义 git log」效果，通过该方法也可以创建 git st 、 git ci 等一系列命令，以便沿用 svn 命令行习惯。 git config --global alias.st &apos;status --porcelain&apos; 更多 git log 参数，可通过 git help log 查看手册。 如果是看上一次提交的版本日志，直接运行 git show 即可。 此外，如果你的 Mac 安装了zsh（参考《全新Mac安装指南（编程篇），那么可以直接使用 gst、glog 等一系列快捷命令，详情见此列表：Plugin:git 。 问：git submodule update 时出错怎么解决？ 例如，在执行 git submodule update 时有以下错误信息： fatal: reference is not a tree: f869da471c5d8a185cd110bbe4842d6757b002f5Unable to checkout ‘f869da471c5d8a185cd110bbe4842d6757b002f5’ in submodule path ‘source/i18n-php-server’ 在此例中，发生以上错误是因为 i18n-php-server 子仓库在某电脑 A 的「本地」commit 了新的版本 「f869da471c5d8a185cd110bbe4842d6757b002f5」，且该次 commit 未 push origin。但其父级仓库 i18n-www 中引用了该子仓库的版本号，且将引用记录 push origin，导致其他客户机无法 update 。 解决方法，在电脑 A 上将 i18n-php-server 版本库 push origin 后，在其他客户机上执行 git submodule update 。或者用以上提到的 git reset 方法，将子仓库的引用版本号还原成 origin 上存在的最新版本号。 其他问题 设置本地分支与远程分支保持同步，在第一次 git push 的时候带上 -u 参数即可 git push origin master -u 支持中文目录与文件名的显示（git 默认将非 ASCII 编码的目录与文件名以八进制编码展示） git config core.quotepath off 常用的打 tag 操作，更多请查看《Git 基础 - 打标签》 # 列出所有本地 tag git tag # 本地新增一个 tag，推送至 origin 服务器 git tag -a v1.0.0 -m &apos;tag description&apos; git push origin v1.0.0 # 删除本地与 origin tag git tag -d v1.0.0 git push origin --delete v1.0.0 使用 git GUI 客户端（如，SoureTree、Github Desktop）能极大的提升分支管理效率。分支合并操作通常只有两种情况：从 origin merge 到本地，使用 git pull 即可；从另外一个本地分支 merge 到当前分支，使用 git merge &lt;分支名&gt;，以下是常用命令： # 新建分支 branch1，并切换过去 git checkout -b branch1 # 查看所有本地与远程分支 git branch -a # 修改完成后，切换回 master 分支，将 branch1 分支合并进来 git checkout master git merge branch1 # 删除已完成合并的分支 branch1 git branch -d branch1 参考资料 Pro Git 简体中文版 Git权威指南 命令行man手册]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法 (简体中文版)]]></title>
    <url>%2F2017%2F07%2F06%2F2017-07-06-markdown-syntax%2F</url>
    <content type="text"><![CDATA[声明： 这份文档派生(fork)于繁体中文版，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里「繁体中文版的原始文件可以查看这里 。」–By @riku Markdown 语法说明 (简体中文版) 概述 宗旨 兼容 HTML 特殊字符自动转换 区块元素 段落和换行 标题 区块引用 列表 代码区块 分隔线 区段元素 链接 强调 代码 图片 其它 反斜杠 自动链接 感谢 概述 宗旨 Markdown 的目标是实现「易读易写」。 可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 Setext、atx、Textile、reStructuredText、Grutatext 和 EtText，而最大灵感来源其实是纯文本电子邮件的格式。 总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。 兼容 HTML Markdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 &lt;p&gt; 标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 这是一个普通段落。 &lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换 在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址转换写为： http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： &amp;copy; Markdown 会保留它不动。而若你写： AT&amp;T Markdown 就会将它转为： AT&amp;amp;T 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 4 &lt; 5 Markdown 将会把它转换为： 4 &amp;lt; 5 不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。） 区块元素 段落和换行 一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。 「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 &lt;br /&gt; 标签。 如果你确实想要依赖 Markdown 来插入 &lt;br /&gt; 标签的话，在插入处先按入两个以上的空格然后回车。 的确，需要多费点事（多加空格）来产生 &lt;br /&gt; ，但是简单地「每个换行都转换为 &lt;br /&gt;」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。 标题 Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。 类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如： This is an H1 ============= This is an H2 ------------- 任何数量的 = 和 - 都可以有效果。 类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如： # 这是 H1 ## 这是 H2 ###### 这是 H6 你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）： # 这是 H1 # ## 这是 H2 ## ### 这是 H3 ###### 区块引用 Blockquotes Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, &gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. &gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse &gt; id sem consectetuer libero luctus adipiscing. Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ： &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ： &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等： &gt; ## 这是一个标题。 &gt; &gt; 1. 这是第一行列表项。 &gt; 2. 这是第二行列表项。 &gt; &gt; 给出一些例子代码： &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。 列表 Markdown 支持有序列表和无序列表。 无序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue 等同于： + Red + Green + Blue 也等同于： - Red - Green - Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish 很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为： &lt;ol&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;McHale&lt;/li&gt; &lt;li&gt;Parish&lt;/li&gt; &lt;/ol&gt; 如果你的列表标记写成： 1. Bird 1. McHale 1. Parish 或甚至是： 3. Bird 1. McHale 8. Parish 你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。 如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。 要让列表看起来更漂亮，你可以把内容用固定的缩进整理好： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 但是如果你懒，那也行： * Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. * Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. 如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 &lt;p&gt;标签包起来，举例来说： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;Bird&lt;/li&gt; &lt;li&gt;Magic&lt;/li&gt; &lt;/ul&gt; 但是这个： * Bird * Magic 会被转换为： &lt;ul&gt; &lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; 列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符： 1. This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. 2. Suspendisse id sem consectetuer libero luctus adipiscing. 如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许： * This is a list item with two paragraphs. This is the second paragraph in the list item. You&apos;re only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. * Another item in the same list. 如果要在列表项目内放进引用，那 &gt; 就需要缩进： * A list item with a blockquote: &gt; This is a blockquote &gt; inside a list item. 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符： * 一列表项包含一个列表区块： &lt;代码写在这&gt; 当然，项目列表很可能会不小心产生，像是下面这样的写法： 1986. What a great season. 换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。 1986\. What a great season. 代码区块 和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 &lt;pre&gt; 和 &lt;code&gt; 标签来把代码区块包起来。 要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入： 这是一个普通段落： 这是一个代码区块。 Markdown 会转换成： &lt;p&gt;这是一个普通段落：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;这是一个代码区块。 &lt;/code&gt;&lt;/pre&gt; 这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如： Here is an example of AppleScript: tell application &quot;Foo&quot; beep end tell 会被转换为： &lt;p&gt;Here is an example of AppleScript:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot; beep end tell &lt;/code&gt;&lt;/pre&gt; 一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。 在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如： &lt;div class=&quot;footer&quot;&gt; &amp;copy; 2004 Foo Corporation &lt;/div&gt; 会被转换为： &lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt; &amp;amp;copy; 2004 Foo Corporation &amp;lt;/div&amp;gt; &lt;/code&gt;&lt;/pre&gt; 代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。 分隔线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： * * * *** ***** - - - --------------------------------------- 区段元素 链接 Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。 不管是哪一种，链接文字都是用 [方括号] 来标记。 要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如： This is [an example](http://example.com/ &quot;Title&quot;) inline link. [This link](http://example.net/) has no title attribute. 会产生： &lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt; an example&lt;/a&gt; inline link.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no title attribute.&lt;/p&gt; 如果你是要链接到同样主机的资源，你可以使用相对路径： See my [About](/about/) page for details. 参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记： This is [an example][id] reference-style link. 你也可以选择性地在两个方括号中间加上一个空格： This is [an example] [id] reference-style link. 接着，在文件的任意处，你可以把这个标记的链接内容定义出来： [id]: http://example.com/ &quot;Optional Title Here&quot; 链接内容定义的形式为： 方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字 接着一个冒号 接着一个以上的空格或制表符 接着链接的网址 选择性地接着 title 内容，可以用单引号、双引号或是括弧包着 下面这三种链接的定义都是相同： [foo]: http://example.com/ &quot;Optional Title Here&quot; [foo]: http://example.com/ &apos;Optional Title Here&apos; [foo]: http://example.com/ (Optional Title Here) 请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。 链接网址也可以用方括号包起来： [id]: &lt;http://example.com/&gt; &quot;Optional Title Here&quot; 你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看： [id]: http://example.com/longish/path/to/resource/here &quot;Optional Title Here&quot; 网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。 链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的： [link text][a] [link text][A] 隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成： [Google][] 然后定义链接内容： [Google]: http://google.com/ 由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词： Visit [Daring Fireball][] for more information. 然后接着定义链接： [Daring Fireball]: http://daringfireball.net/ 链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。 下面是一个参考式链接的范例： I get 10 times more traffic from [Google] [1] than from [Yahoo] [2] or [MSN] [3]. [1]: http://google.com/ &quot;Google&quot; [2]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [3]: http://search.msn.com/ &quot;MSN Search&quot; 如果改成用链接名称的方式写： I get 10 times more traffic from [Google][] than from [Yahoo][] or [MSN][]. [google]: http://google.com/ &quot;Google&quot; [yahoo]: http://search.yahoo.com/ &quot;Yahoo Search&quot; [msn]: http://search.msn.com/ &quot;MSN Search&quot; 上面两种写法都会产生下面的 HTML。 &lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from &lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt; or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt; 下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用： I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;) than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or [MSN](http://search.msn.com/ &quot;MSN Search&quot;). 参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。 使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。 强调 Markdown 使用星号（*）和底线（_）作为标记强调字词的符号，被 * 或 _ 包围的字词会被转成用 &lt;em&gt; 标签包围，用两个 * 或 _ 包起来的话，则会被转成 &lt;strong&gt;，例如： *single asterisks* _single underscores_ **double asterisks** __double underscores__ 会转成： &lt;em&gt;single asterisks&lt;/em&gt; &lt;em&gt;single underscores&lt;/em&gt; &lt;strong&gt;double asterisks&lt;/strong&gt; &lt;strong&gt;double underscores&lt;/strong&gt; 你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。 强调也可以直接插在文字中间： un*frigging*believable 但是如果你的 * 和 _ 两边都有空白的话，它们就只会被当成普通的符号。 如果要在文字前后直接插入普通的星号或底线，你可以用反斜线： \*this text is surrounded by literal asterisks\* 代码 如果要标记一小段行内代码，你可以用反引号把它包起来（` ），例如： Use the `printf()` function. 会产生： &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt; 如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段： ``There is a literal backtick (`) here.`` 这段语法会产生： &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt; 代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号： A single backtick in a code span: `` ` `` A backtick-delimited string in a code span: `` `foo` `` 会产生： &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt; &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt; 在代码区段内，&amp; 和方括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段： Please don&apos;t use any `&lt;blink&gt;` tags. 转为： &lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; 你也可以这样写： `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`. 以产生： &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt; 图片 很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。 Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。 行内式的图片语法看起来像是： ![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 详细叙述如下： 一个惊叹号 ! 接着一个方括号，里面放上图片的替代文字 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 文字。 参考式的图片语法则长得像这样： ![Alt text][id] 「id」是图片参考的名称，图片参考的定义方式则和连结参考一样： [id]: url/to/image &quot;Optional title attribute&quot; 到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。 其它 自动链接 Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如： &lt;http://example.com/&gt; Markdown 会转为： &lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt; 邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如： &lt;address@example.com&gt; Markdown 会转成： &lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65; &amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111; &amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61; &amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt; 在浏览器里面，这段字串（其实是 &lt;a href=&quot;mailto:address@example.com&quot;&gt;address@example.com&lt;/a&gt;）会变成一个可以点击的「address@example.com」链接。 （这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。） 反斜杠 Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 &lt;em&gt; 标签），你可以在星号的前面加上反斜杠： \*literal asterisks\* Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[利用Hexo将网站部署到GithubPages]]></title>
    <url>%2F2017%2F07%2F06%2F2017-07-06-hexo-gihub-pages%2F</url>
    <content type="text"><![CDATA[一直想自己搭建一个个人独立博客，我尝试着使用很多方式自己搭建一个网站，但由于水平有限，一直没有搭建好。最终选择了利用Hexo搭建自己博客，挂在了giuhub上。这是我建立的一个自己的主页，个人觉得用hexo搭建github博客还是比较简单的，希望能给想要搭建个人博客网站的小伙伴们一个参考。 Ps： 本文是在Windows上搭建的，其他OS搭配环境大致相同，如果感到不适请自行Google。 1.配置开发环境什么是Hexo？Hexo是一个快速，简单和强大的博客框架。您在Markdown（或其他语言）中撰写帖子，Hexo会在几秒钟内生成具有美丽主题的静态文件。 安装Hexo只需要几分钟的时间。安装Hexo很容易。但是，您需要首先安装几个其他的东西： 1. Git 2. Node.js 如果您的电脑已经有这些，恭喜！只需安装Hexo与npm：$ npm install -g hexo-cli如果没有，请到官网安装所有要求： Git官网下载并安装Git。 Node.js官网下载并安装Node.js。 2.Hexo网站建立安装Hexo后，运行以下命令在目标中初始化Hexo 。 $ hexo init &lt;folder&gt; $ cd &lt;folder&gt; $ npm安装 一旦初始化，您的项目文件夹将如下所示： 。 ├──_config.yml ├──package.json ├──scaffolds ├──source | ├──_drafts | └──_posts └──主题 config.yml: 站点配置文件,您可以在此配置大多数设置。package.json: 应用数据。该EJS，Stylus和Markdown默认安装的。如果需要，您可以稍后卸载它们。/scaffolds/: 脚手架文件夹。当您创建一个新帖子时，Hexo将新文件放在脚手架上。/source/: 源文件夹。这是您放置网站内容的地方。Hexo忽略隐藏的文件和名称前缀为（下划线）的文件或文件夹- _posts文件夹除外。可渲染文件（例如Markdown，HTML）将被处理并放入该public文件夹，而其他文件将被简单地复制。/theme/: 主题文件夹。Hexo通过将网站内容与主题相结合来生成一个静态网站。 我选择的是hexo-theme-next 主题，个人比较喜欢里面的Mist布局具体设置内容请看theme-next注：需将下载好的主题文件夹的[.git]文件夹删掉否则将上传不到github 3.部署到github登录账号后，在Github页面的右上方选择New repository进行仓库的创建 配置部署，在项目根目录的文件中修改_config.yml： deploy: type: git repository: https://github.com/yourname/yourname.github.io.git branch: master 发表一篇文章在终端输入：$ hexo new &quot;title&quot;保存后，我们进行本地发布：$ hexo server打开浏览器，输入：http://localhost:4000/ 部署github pages但是毕竟我们目前发布的只有本机看得到，怎么让其他人看到我们写的博客呢？这时候我们来看看博客的部署。 我们只要在终端执行这样的命令即可： $ hexo generate $ hexo deploy 这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是：yourname.github.io。 注： 由于github在国内各种原因可能，你修改的内容无法立即在github上看到，需要等一段时间。 以上大致是我部署这个网站的简单步骤，如有以疑问可以QQ问我]]></content>
      <categories>
        <category>website</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>